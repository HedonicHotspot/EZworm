# Get annotated raw counts
rawcounts <- featureCounts(BAMfilenames,
annot.ext = gene_predict,
isPairedEnd = TRUE)
write_rds(rawcounts)
}
# For single end
else
{
#Make BAM file names and remove path/extention from names
BAMfilenames <- substr(fastqfiles, nchar(RNAseqData), nchar(fastqfiles)-3)
#Align reads to genome
align(index="reference_index",
readfile1=fastqfiles,
type="rna",
output_file = BAMfilenames,
annot.ext = gene_predict,
isGTF = TRUE)
bam.files <- paste0(getwd(), "/RNAseqAlignment/", BAMfilenames)
bam.path <- paste0(getwd(), "/RNAseqAlignment/")
rawcounts <- featureCounts(bam.files,
annot.ext = gene_predict,
isPairedEnd = FALSE)
write_delim(as.data.frame(rawcounts$counts),
paste0(getwd(), "/rawcounts.txt"))
}
}
# May input a csv with first column as old RNAseq filenames
# and second column new filenames EZformatted (i.e includes R1.fa/R2.fa)
EZ$align <- function(NameCSV = FALSE) {
# For paired-end
if (class(NameCSV) == "character") {
file.rename(
paste0("RNAseqData/",read.csv(NameCSV, header = F)[,1]),
paste0("RNAseqData/",read.csv(NameCSV, header = F)[,2])
)
}
gene_predict <- paste0(getwd(),'/smes_v2_repeatfil_YAI.saf')
RNAseqData <- paste0(getwd(), "/RNAseqData/")
fastqfiles <- list.files(path = "RNAseqData", full.names = TRUE)
fastqfiles <- grep(".fa", fastqfiles, value = TRUE)
if (sum(grepl("R1.fa|R2.fa", ignore.case = T, fastqfiles)) > 2) {
if ("smes_v2_repeatfil_YAI.saf" %in% list.files() == F) {EZ$DLgene_predict()}
#Each pair read file in seperate vectors
fastqfiles1 <- grep("R1.fa", fastqfiles, value = TRUE)
fastqfiles1 <- sort(fastqfiles1)
fastqfiles2 <- grep("R2.fa", fastqfiles, value = TRUE)
fastqfiles2 <- sort(fastqfiles2)
# Make BAM file names and remove path/extention from names
BAMfilenames <- gsub("RNAseqData/|_R1.fasta.gz|_R1.fa", "", fastqfiles1, ignore.case = T)
# Align reads to genome
if ( !(BAMfilenames %in% list.files()) ) {
align(index="reference_index",
readfile1=fastqfiles1,
readfile2 = fastqfiles2,
type="rna",
output_file = BAMfilenames,
annot.ext = gene_predict,
isGTF = TRUE)
}
# Get annotated raw counts
rawcounts <- featureCounts(BAMfilenames,
annot.ext = gene_predict,
isPairedEnd = TRUE)
write_rds(rawcounts)
}
# For single end
else
{
#Make BAM file names and remove path/extention from names
BAMfilenames <- substr(fastqfiles, nchar(RNAseqData), nchar(fastqfiles)-3)
#Align reads to genome
align(index="reference_index",
readfile1=fastqfiles,
type="rna",
output_file = BAMfilenames,
annot.ext = gene_predict,
isGTF = TRUE)
bam.files <- paste0(getwd(), "/RNAseqAlignment/", BAMfilenames)
bam.path <- paste0(getwd(), "/RNAseqAlignment/")
rawcounts <- featureCounts(bam.files,
annot.ext = gene_predict,
isPairedEnd = FALSE)
write_delim(as.data.frame(rawcounts$counts),
paste0(getwd(), "/rawcounts.txt"))
}
}
EZ$align(NameCSV = "EZfastaNames.csv")
rawcounts <- featureCounts(BAMfilenames,
annot.ext = gene_predict,
isPairedEnd = TRUE)
gene_predict <- paste0(getwd(),'/smes_v2_repeatfil_YAI.saf')
rawcounts <- featureCounts(BAMfilenames,
annot.ext = gene_predict,
isPairedEnd = TRUE)
rawcounts <- featureCounts(BAMfilenames,
annot.ext = gene_predict,
isPairedEnd = TRUE,)
rawcounts <- featureCounts(BAMfilenames,
annot.ext = gene_predict,
isPairedEnd = TRUE, isGTFAnnotationFile = T)
read_file("smes_v2_repeatfil_YAI.saf")
read.table(gene_predict)
rawcounts <- featureCounts(BAMfilenames,
annot.ext = read_table(gene_predict),
isPairedEnd = TRUE)
head(read_table(gene_predict))
head(as.data.frame(read_table(gene_predict)))
head(as.data.frame(read_table(gene_predict)))
?read.table
head(read.table(gene_predict, header = T))
rawcounts <- featureCounts(BAMfilenames,
annot.ext = read.table(gene_predict, header = T),
isPairedEnd = TRUE)
EZ$align(NameCSV = "EZfastaNames.csv")
packages = c("BiocManager","tidyverse", "ggplot2", "dplyr", "RColorBrewer",
"ggthemes", "formattable", "gplots", "readr",  "RColorBrewer",
"limma", "edgeR", "Rsubread", "topGO", "circlize", "genefilter",
"RSelenium", "here", "scriptName", "sjmisc")
## Load R and BioConductoR packages
lapply(packages, library, character.only = T)
setwd(here())
EZ <- list()  # Stores functions
# Alignment Functions
# Download all your fastq files to the RNAseqData folder located within the
# RNAseqAlignment folder. Fastq files are large, so make sure you have enough
# storage on your device.
# IF your data is paired-end, the file names need to contain "_R1.fa" or
#"_R2.fa" for the respective files. Do add a "." anywhere else.
# Make sure your file names also indicate the animal experimental condition,
# timepoint, etc. For example, follow this format:
#   Cond1_T1_R1.fa or else the code will not work.
# IF your data is single-end, you just need to make sure your files contain the .fa
# extension and the animal experimental condition, timepoint, etc. For example,
# follow this format: Cond1_T1.fa or else the code will not work.
# Download Genome
EZ$DLgenome <- function() {
gitlink <- "https://github.com/HedonicHotspot/EZworm/raw/master/genomeYAI.fa.zip"
getOption('timeout')
options(timeout=1500)
download.file(gitlink, "genome.fa.zip")
unzip("genomeYAI.fa.zip")
}
# Fetch Gene Predictions
EZ$DLgene_predict <- function() {
gitlink <- "https://raw.githubusercontent.com/HedonicHotspot/EZworm/28f6502dda9208e6626358b32ebb9e48fd887e7b/smes_v2_repeatfil_YAI.saf"
write.table(as.data.frame(read_table(gitlink)), "smes_v2_repeatfil_YAI.saf")
}
# For aligning RNAseq data
EZ$index <- function() {
if ("genomeYAI.fa" %in% list.files() == F){EZ$DLgenome()}
genome <- paste0(getwd(), '/genomeYAI.fa')
buildindex(basename="reference_index", reference= genome)
}
# May input a csv with first column as old RNAseq filenames
# and second column new filenames EZformatted (i.e includes R1.fa/R2.fa)
EZ$align <- function(NameCSV = FALSE) {
# For paired-end
if (class(NameCSV) == "character") {
file.rename(
paste0("RNAseqData/",read.csv(NameCSV, header = F)[,1]),
paste0("RNAseqData/",read.csv(NameCSV, header = F)[,2])
)
}
gene_predict <- paste0(getwd(),'/smes_v2_repeatfil_YAI.saf')
RNAseqData <- paste0(getwd(), "/RNAseqData/")
fastqfiles <- list.files(path = "RNAseqData", full.names = TRUE)
fastqfiles <- grep(".fa", fastqfiles, value = TRUE)
if (sum(grepl("R1.fa|R2.fa", ignore.case = T, fastqfiles)) > 2) {
if ("smes_v2_repeatfil_YAI.saf" %in% list.files() == F) {EZ$DLgene_predict()}
#Each pair read file in seperate vectors
fastqfiles1 <- grep("R1.fa", fastqfiles, value = TRUE)
fastqfiles1 <- sort(fastqfiles1)
fastqfiles2 <- grep("R2.fa", fastqfiles, value = TRUE)
fastqfiles2 <- sort(fastqfiles2)
# Make BAM file names and remove path/extention from names
BAMfilenames <- gsub("RNAseqData/|_R1.fasta.gz|_R1.fa", "",
fastqfiles1, ignore.case = T)
# Align reads to genome
if ( !(BAMfilenames %in% list.files()) ) {
align(index="reference_index",
readfile1=fastqfiles1,
readfile2 = fastqfiles2,
type="rna",
output_file = BAMfilenames,
annot.ext = read.table(gene_predict, header = T),
isGTF = TRUE)
}
# Get annotated raw counts
rawcounts <- featureCounts(BAMfilenames,
annot.ext = read.table(gene_predict, header = T),
isPairedEnd = TRUE)
write_rds(rawcounts)
}
# For single end
else
{
#Make BAM file names and remove path/extention from names
BAMfilenames <- gsub("RNAseqData/|_R1.fasta.gz|_R1.fa", "",
fastqfiles, ignore.case = T)
if ( !(BAMfilenames %in% list.files()) ) {
#Align reads to genome
align(index="reference_index",
readfile1=fastqfiles,
type="rna",
output_file = BAMfilenames,
annot.ext = read.table(gene_predict, header = T),
isGTF = TRUE)
}
rawcounts <- featureCounts(BAMfilenames,
annot.ext = read.table(gene_predict, header = T),
isPairedEnd = FALSE)
write_rds(rawcounts)
}
}
EZ$BamSummary <- function() {
bam.files.summary <- list.files(path = getwd(),
pattern = ".summary$",
full.names = TRUE)
align_summary <- lapply(bam.files.summary, read.table,
sep="\t", header=FALSE)
align_summary <- as.data.frame(align_summary)
rownames(align_summary) <- align_summary[,1]
align_summary <- align_summary[ ,seq(2,length(align_summary),2)]
colnames(align_summary) <- BAMfilenames
align_sum_file <- paste0(getwd(), "/align_summary.csv", BAMfilenames)
write_csv(align_summary, align_sum_file)
}
# Post Alignment Functions
# Order dataframe/matrix by selected columns
#Automatically reorders heatmaps by whichever columns selected. For example,
#to order dataframe (df) in increasing order by the first 3 columns all you need
#to do is type hm_order(df, c(1,2,3))
#input dataframe/matrix and selected columns
EZ$hm_order <- function(df, cols = c(1), decr = FALSE){
if(length(cols) > 1){
hmz <- apply(df, 2, FUN = function(x)
{return( (rowMeans(df) - x)/rowSds(df) )} )
hmrow <- rowSums(hmz[,cols]) #Columns 1 to 3 are control
df[order(hmrow, decreasing = decr),]
}
else {
hmz <- apply(df, 2, FUN = function(x)
{return( (rowMeans(df) - x)/rowSds(df) )} )
df[order(hmz[,cols], decreasing = decr),]
}
}
# Column to Rownames
#Takes the first column and makes it a row.
# rename dataframe rows from selected column
EZ$col2namerow <- function(df, col=1) {
rownames(df) <- df[,col]
df <- df[,-col]
return(df)
}
# Print List of Dataframes to single csv page
# Useful for reporting GO results of several samples
# Useful for reporting genes grouped by functions
EZ$list2csv <- function(DFlist, File = 'DFlist.csv') {
pdf(File)
for (ind in 1:length(DFlist)) {
write.table(paste0(names(DFlist)[ind]), file = File,
sep = ",", col.names = FALSE, append = T, row.names = FALSE)
write.table( data.frame(allRes[[DFlist]]), file = File,
append= T, sep=',', col.names = NA)
}
dev.off()
}
EZ$align(NameCSV = "EZfastaNames.csv")
EZ$align(NameCSV = "EZfastaNames.csv")
EZ$index()
listfiles("reference_index")
list.files("reference_index")
list.files(pattern =  "reference_index")
refIndexFiles <- list.files(pattern="reference_index")
length(refIndexFiles)==5
length(refIndexFiles)!=5
EZ$align(NameCSV = "EZfastaNames.csv")
read.csv(NameCSV, header = F)
read.csv("EZfastaNames.csv", header = F)
read.csv("EZfastaNames.csv", header = F)[,1]
list.files("RNAseqData")
read.csv("EZfastaNames.csv", header = F)[,2] %in% list.files("RNAseqData")
prod(read.csv("EZfastaNames.csv", header = F)[,2] %in% list.files("RNAseqData"))
# For aligning RNAseq data
# May input a csv with first column as old RNAseq filenames
# and second column new filenames EZformatted (i.e includes R1.fa/R2.fa)
EZ$align <- function(NameCSV = FALSE) {
refIndexFiles <- list.files(pattern="reference_index")
if (length(refIndexFiles)!=5){
EZ$index()
}
# For paired-end
if ( (class(NameCSV) == "character") &
(prod(read.csv("EZfastaNames.csv", header = F)[,2] %in%
list.files("RNAseqData")) = 0
)) {
file.rename(
paste0("RNAseqData/",read.csv(NameCSV, header = F)[,1]),
paste0("RNAseqData/",read.csv(NameCSV, header = F)[,2])
)
}
gene_predict <- paste0(getwd(),'/smes_v2_repeatfil_YAI.saf')
RNAseqData <- paste0(getwd(), "/RNAseqData/")
fastqfiles <- list.files(path = "RNAseqData", full.names = TRUE)
fastqfiles <- grep(".fa", fastqfiles, value = TRUE)
if (sum(grepl("R1.fa|R2.fa", ignore.case = T, fastqfiles)) > 2) {
if ("smes_v2_repeatfil_YAI.saf" %in% list.files() == F) {EZ$DLgene_predict()}
#Each pair read file in seperate vectors
fastqfiles1 <- grep("R1.fa", fastqfiles, value = TRUE)
fastqfiles1 <- sort(fastqfiles1)
fastqfiles2 <- grep("R2.fa", fastqfiles, value = TRUE)
fastqfiles2 <- sort(fastqfiles2)
# Make BAM file names and remove path/extention from names
BAMfilenames <- gsub("RNAseqData/|_R1.fasta.gz|_R1.fa", "",
fastqfiles1, ignore.case = T)
# Align reads to genome
if ( !(BAMfilenames %in% list.files()) ) {
align(index="reference_index",
readfile1=fastqfiles1,
readfile2 = fastqfiles2,
type="rna",
output_file = BAMfilenames,
annot.ext = read.table(gene_predict, header = T),
isGTF = TRUE)
}
# Get annotated raw counts
rawcounts <- featureCounts(BAMfilenames,
annot.ext = read.table(gene_predict, header = T),
isPairedEnd = TRUE)
write_rds(rawcounts)
}
# For single end
else {
#Make BAM file names and remove path/extention from names
BAMfilenames <- gsub("RNAseqData/|.fasta.gz|.fasta|.fa|.fa.gz", "",
fastqfiles, ignore.case = T)
if ( !(BAMfilenames %in% list.files()) ) {
#Align reads to genome
align(index="reference_index",
readfile1=fastqfiles,
type="rna",
output_file = BAMfilenames,
annot.ext = read.table(gene_predict, header = T),
isGTF = TRUE)
}
rawcounts <- featureCounts(BAMfilenames,
annot.ext = read.table(gene_predict, header = T),
isPairedEnd = FALSE)
write_rds(rawcounts)
}
}
EZ$align(NameCSV = "EZfastaNames.csv")
# For aligning RNAseq data
# May input a csv with first column as old RNAseq filenames
# and second column new filenames EZformatted (i.e includes R1.fa/R2.fa)
EZ$align <- function(NameCSV = FALSE) {
refIndexFiles <- list.files(pattern="reference_index")
if (length(refIndexFiles)!=5){
EZ$index()
}
# For paired-end
if ( (class(NameCSV) == "character") &
(prod(read.csv("EZfastaNames.csv", header = F)[,2] %in%
list.files("RNAseqData")) == 0 )) {
file.rename(
paste0("RNAseqData/",read.csv(NameCSV, header = F)[,1]),
paste0("RNAseqData/",read.csv(NameCSV, header = F)[,2])
)
}
gene_predict <- paste0(getwd(),'/smes_v2_repeatfil_YAI.saf')
RNAseqData <- paste0(getwd(), "/RNAseqData/")
fastqfiles <- list.files(path = "RNAseqData", full.names = TRUE)
fastqfiles <- grep(".fa", fastqfiles, value = TRUE)
if (sum(grepl("R1.fa|R2.fa", ignore.case = T, fastqfiles)) > 2) {
if ("smes_v2_repeatfil_YAI.saf" %in% list.files() == F) {EZ$DLgene_predict()}
#Each pair read file in seperate vectors
fastqfiles1 <- grep("R1.fa", fastqfiles, value = TRUE)
fastqfiles1 <- sort(fastqfiles1)
fastqfiles2 <- grep("R2.fa", fastqfiles, value = TRUE)
fastqfiles2 <- sort(fastqfiles2)
# Make BAM file names and remove path/extention from names
BAMfilenames <- gsub("RNAseqData/|_R1.fasta.gz|_R1.fa", "",
fastqfiles1, ignore.case = T)
# Align reads to genome
if ( !(BAMfilenames %in% list.files()) ) {
align(index="reference_index",
readfile1=fastqfiles1,
readfile2 = fastqfiles2,
type="rna",
output_file = BAMfilenames,
annot.ext = read.table(gene_predict, header = T),
isGTF = TRUE)
}
# Get annotated raw counts
rawcounts <- featureCounts(BAMfilenames,
annot.ext = read.table(gene_predict, header = T),
isPairedEnd = TRUE)
write_rds(rawcounts)
}
# For single end
else {
#Make BAM file names and remove path/extention from names
BAMfilenames <- gsub("RNAseqData/|.fasta.gz|.fasta|.fa|.fa.gz", "",
fastqfiles, ignore.case = T)
if ( !(BAMfilenames %in% list.files()) ) {
#Align reads to genome
align(index="reference_index",
readfile1=fastqfiles,
type="rna",
output_file = BAMfilenames,
annot.ext = read.table(gene_predict, header = T),
isGTF = TRUE)
}
rawcounts <- featureCounts(BAMfilenames,
annot.ext = read.table(gene_predict, header = T),
isPairedEnd = FALSE)
write_rds(rawcounts)
}
}
EZ$align(NameCSV = "EZfastaNames.csv")
BAMfilenames <- gsub("RNAseqData/|.fasta.gz|.fasta|.fa|.fa.gz", "",
fastqfiles, ignore.case = T)
BAMfilenames
fastqfiles
fastqfiles <- list.files(path = "RNAseqData", full.names = TRUE)
fastqfiles <- grep(".fa", fastqfiles, value = TRUE)
BAMfilenames <- gsub("RNAseqData/|.fasta.gz|.fasta|.fa|.fa.gz", "",
fastqfiles, ignore.case = T)
BAMfilenames
BAMfilenames %in% list.files()
prod(BAMfilenames %in% list.files()) == 0
prod(BAMfilenames %in% list.files())
rawcounts <- featureCounts(BAMfilenames,
annot.ext = read.table(gene_predict, header = T),
isPairedEnd = FALSE)
EZ$align(NameCSV = "EZfastaNames.csv")
# For aligning RNAseq data
# May input a csv with first column as old RNAseq filenames
# and second column new filenames EZformatted (i.e includes R1.fa/R2.fa)
EZ$align <- function(NameCSV = FALSE) {
refIndexFiles <- list.files(pattern="reference_index")
if (length(refIndexFiles)!=5){ # Download index if not present
EZ$index()
}
# For paired-end
if ( (class(NameCSV) == "character") &
(prod(read.csv("EZfastaNames.csv", header = F)[,2] %in%
list.files("RNAseqData")) == 0 )) {
file.rename(
paste0("RNAseqData/",read.csv(NameCSV, header = F)[,1]),
paste0("RNAseqData/",read.csv(NameCSV, header = F)[,2])
)
}
gene_predict <- paste0(getwd(),'/smes_v2_repeatfil_YAI.saf')
RNAseqData <- paste0(getwd(), "/RNAseqData/")
fastqfiles <- list.files(path = "RNAseqData", full.names = TRUE)
fastqfiles <- grep(".fa", fastqfiles, value = TRUE)
if (sum(grepl("R1.fa|R2.fa", ignore.case = T, fastqfiles)) > 2) {
if ("smes_v2_repeatfil_YAI.saf" %in% list.files() == F) {EZ$DLgene_predict()}
#Each pair read file in seperate vectors
fastqfiles1 <- grep("R1.fa", fastqfiles, value = TRUE)
fastqfiles1 <- sort(fastqfiles1)
fastqfiles2 <- grep("R2.fa", fastqfiles, value = TRUE)
fastqfiles2 <- sort(fastqfiles2)
# Make BAM file names and remove path/extention from names
BAMfilenames <- gsub("RNAseqData/|_R1.fasta.gz|_R1.fa", "",
fastqfiles1, ignore.case = T)
# Align reads to genome
if ( prod(BAMfilenames %in% list.files()) == 0) {
align(index="reference_index",
readfile1=fastqfiles1,
readfile2 = fastqfiles2,
type="rna",
output_file = BAMfilenames,
annot.ext = read.table(gene_predict, header = T),
isGTF = TRUE)
}
# Get annotated raw counts
rawcounts <- featureCounts(BAMfilenames,
annot.ext = read.table(gene_predict, header = T),
isPairedEnd = TRUE)
write_rds(rawcounts)
}
# For single-end
else {
#Make BAM file names and remove path/extention from names
BAMfilenames <- gsub("RNAseqData/|.fasta.gz|.fasta|.fa|.fa.gz", "",
fastqfiles, ignore.case = T)
if ( prod(BAMfilenames %in% list.files()) == 0) {
#Align reads to genome
align(index="reference_index",
readfile1=fastqfiles,
type="rna",
output_file = BAMfilenames,
annot.ext = read.table(gene_predict, header = T),
isGTF = TRUE)
}
rawcounts <- featureCounts(BAMfilenames,
annot.ext = read.table(gene_predict, header = T),
isPairedEnd = FALSE)
write_rds(rawcounts)
}
}
EZ$align(NameCSV = "EZfastaNames.csv")
head(read_rds("PlAnnotation.RDS"))
install.packages("getSRAfile")
install.packages("SRAdb")
install.packages("SRAdbV2")
BiocManager::install("SRAdb")
BiocManager::install("SRAdbV2")
BiocManager::install("SRAdb")
