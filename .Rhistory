colnames(print_res) <- str_remove(colnames(print_res), "ebay\\[\\[ind\\]\\]*")
write_delim(print_res,  delim = ",", "results.csv")
#Results for all and top 500 DE genes
ttable <- topTable(ebay, p.value = .05, lfc = 1, number = nrow(ebay$coefficients), sort.by = "F")
ttable500 <- topTable(ebay, p.value = .05, lfc = .5, number = 500, sort.by = "F")
DEgenes <- DGE$counts[rownames(ttable),]
DEgenes500 <- DGE$counts[rownames(ttable500),]
dt <-decideTests(ebay, p.value = .05)
summary(dt)
#Find Down Regulated Genes
down_genes <- as.data.frame(dt)
down_genes$score <- rowSums(down_genes)
down_genes <- down_genes[down_genes$score < 0,]
down_genes_annot <- merge(down_genes, smes, by.x = 0, by.y = 2)
dt <-decideTests(ebay, p.value = .05, lfc = .25)
summary(dt)
dt <-decideTests(ebay, p.value = .05, lfc = .5)
summary(dt)
knitr::opts_chunk$set(echo = FALSE)
setwd("~/github/PTEN")
packages = c("BiocManager","tidyverse", "ggplot2", "dplyr", "RColorBrewer", "ggthemes", "formattable", "gplots", "readr",  "RColorBrewer", "limma", "edgeR", "Rsubread", "topGO", "circlize", "genefilter")
## Load R and BioConductoR packages
lapply(packages, library, character.only = T)
# Order dataframe/matrix by selected columns
# input dataframe/matrix and selected columns
hm_order <- function(df, cols = c(1), decr = FALSE){
if(length(cols) > 1){
hmz <- apply(df, 2, FUN = function(x)
{return( (rowMeans(df) - x)/rowSds(df) )} )
hmrow <- rowSums(hmz[,cols]) #i.e columns 1 to 3 are control
df[order(hmrow, decreasing = decr),]
}
else {
hmz <- apply(df, 2, FUN = function(x)
{return( (rowMeans(df) - x)/rowSds(df) )} )
df[order(hmz[,cols], decreasing = decr),]
}
}
col2namerow <- function(df, colmn=1) {
if (class(colmn) == "character" ) {
rownames(df) <- df[,colmn]
df <- dplyr::select(df,-colmn)
}
else {
rownames(df) <- df[,colmn]
df <- df[,-colmn]
}
return(df)
}
gene2sym <- function (df,IDinRow = T){
if (IDinRow) {
df <- merge(df, read_rds("PlAnnotation.RDS")[,c("GeneID", "Symbol")],
by.x = 0, by.y = "GeneID") |>
col2namerow("Symbol") |> dplyr::select(-"Row.names")
}
else {
df <- merge(df, read_rds("PlAnnotation.RDS")[,c("GeneID", "Symbol")],
by = "GeneID") |> dplyr::select(-"GeneID")
}
return(df)
}
# Annotations
smes <- read_delim("Smes.tsv",
delim = "\t", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE) |> as.data.frame()
colnames(smes) <- c("GeneID", "TransID", "Symbol", "Description")
annotations <- smes
annotations[is.na(annotations$Symbol),3:4] <-
annotations$TransID[is.na(annotations$Symbol)]
annotations <- annotations[!duplicated(annotations$GeneID),]
annotations <- read_rds("PlAnnotation.RDS")
# Data
countdata <- readRDS('counts.RDS')
counts <- countdata$counts |> as.data.frame()
gsub("_.*", "", colnames(counts))
colnames(counts) <- gsub("_.*", "", colnames(counts))
counts <- counts[,c(1:3, 7:9, 4:6, 13:24, 10:12)]
counts[,c("P112","P31")] <- counts[,c("P31","P112")] # samples mislabeled
counts <- dplyr::select(counts,
-c("C71", "C73", "C113")) # Remove outliers
# Organize Metadata
metadata <- data.frame(samples = colnames(counts),
condition = c(substr(colnames(counts)[1:6], 1,1),
str_sub(colnames(counts)[7:ncol(counts)], 1,-2)))
# Sum transcript counts to gene counts
counts <- merge(counts, smes[,1:2], by.x = 0, by.y = 2) %>%
group_by(GeneID) %>%
summarise(across(metadata$samples,sum)) %>% as.data.frame() %>%
col2namerow()
DGE <- DGEList(counts,
norm.factors = calcNormFactors(counts, method = "TMM"),
samples = metadata$samples,
group = metadata$condition)
# Load a nice color palette of 50 colors to be used for plots
myPalette <- c(brewer.pal(8, "Set1"), brewer.pal(8, "Set2"))
# convert counts to cpm and log
unfilteredExpr <- cpm(DGE, log=TRUE)
# Filter lowly expressed genes via edgeR
keep = filterByExpr(DGE, group = metadata$condition)
DGE <- DGE[keep, , keep.lib.sizes = FALSE]
# Calculate normalization factors
DGE <- calcNormFactors(DGE, method = "TMM")
# Plot the density of filtered gene expression for all samples within groups
filteredExpr <- cpm(DGE, log=TRUE)
filteredExpr[filteredExpr<0] <- 0    #ensuring no negative values
# Plot the density of unfiltered and filtered gene expression for all samples within groups
par(mfrow=c(2,2))
plotDensities(unfilteredExpr, group=metadata$condition, col=myPalette[1:8])
plotDensities(filteredExpr, group=metadata$condition, col=myPalette[1:8])
boxplot(unfilteredExpr, las=2, main="")
boxplot(filteredExpr, las=2, main="")
pdf("MDSplot1.pdf", title = "My Title")
plotMDS(filteredExpr, labels=metadata$samples,
col=c(rep("black",9), rep("yellow",3), rep("orange", 3), rep("red"),
rep("darkred",3), rep("purple",3)))
dev.off()
counts <- dplyr::select(counts, -c("C112", "C03", "C111")) # Mel Removed c("112", "P33")
metadata <- metadata[metadata$samples%in%colnames(counts),]
DGE <- DGEList(counts,
norm.factors = calcNormFactors(counts, method = "TMM"),
samples = metadata$samples,
group = metadata$condition)
DGE <- DGEList(counts,
norm.factors = calcNormFactors(counts, method = "TMM"),
samples = metadata$samples,
group = metadata$condition)
# Load a nice color palette of 50 colors to be used for plots
myPalette <- c(brewer.pal(8, "Set1"), brewer.pal(8, "Set2"))
# convert counts to cpm and log
unfilteredExpr <- cpm(DGE, log=TRUE)
# Filter lowly expressed genes via edgeR
keep = filterByExpr(DGE, group = metadata$condition)
DGE <- DGE[keep, , keep.lib.sizes = FALSE]
# Calculate normalization factors
DGE <- calcNormFactors(DGE, method = "TMM")
# Plot the density of filtered gene expression for all samples within groups
filteredExpr <- cpm(DGE, log=TRUE)
filteredExpr[filteredExpr<0] <- 0    #ensuring no negative values
# Plot the density of unfiltered and filtered gene expression for all samples within groups
par(mfrow=c(2,2))
plotDensities(unfilteredExpr, group=metadata$condition, col=myPalette[1:8])
plotDensities(filteredExpr, group=metadata$condition, col=myPalette[1:8])
boxplot(unfilteredExpr, las=2, main="")
boxplot(filteredExpr, las=2, main="")
pdf("MDSplot2.pdf", title = "MDS Plot")
plotMDS(filteredExpr, labels=metadata$samples,
col=c(rep("black",6), rep("yellow",3), rep("orange", 3), rep("red",3),
rep("darkred",3), rep("purple",3)))
dev.off()
the_design <- model.matrix(~0 +condition, data = metadata)
colnames(the_design) <- gsub("condition", "", colnames(the_design))
contr.matrix <- makeContrasts(
conVSP2 = P2 - C,
conVSP3 = P3 - C,
conVSP4 = P4 - C,
conVSP6 = P6 - C,
conVSP11 = P11 - C,
levels = c("C", "P2", "P3", "P4", "P6", "P11"))
the_design
contr.matrix
v <- voomWithQualityWeights(filteredExpr, the_design, plot=TRUE)
vfit <- lmFit(v, the_design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
plotSA(efit)
ebay <- eBayes(vfit) #Empirical Bayes
# Print empirical Bayes results
res_ind <- c(2:4, 16:length(ebay))
print_res <- as.data.frame(ebay[[1]])
colnames(print_res) <- paste0(colnames(print_res),names(ebay)[1])
for (ind in res_ind) {
temp <- as.data.frame(ebay[[ind]])
colnames(temp) <- paste0(colnames(temp),names(ebay)[ind])
print_res <-  cbind(print_res,temp)
}
colnames(print_res) <- str_remove(colnames(print_res), "ebay\\[\\[ind\\]\\]*")
write_delim(print_res,  delim = ",", "results.csv")
#Results for all and top 500 DE genes
ttable <- topTable(ebay, p.value = .05, lfc = .25, number = nrow(ebay$coefficients), sort.by = "F")
ttable500 <- topTable(ebay, p.value = .05, lfc = .5, number = 500, sort.by = "F")
DEgenes <- DGE$counts[rownames(ttable),]
DEgenes500 <- DGE$counts[rownames(ttable500),]
dt <-decideTests(ebay, p.value = .05, lfc = .5)
summary(dt)
#Find Down Regulated Genes
down_genes <- as.data.frame(dt)
down_genes$score <- rowSums(down_genes)
down_genes <- down_genes[down_genes$score < 0,]
down_genes_annot <- merge(down_genes, smes, by.x = 0, by.y = 2)
# mypalette <- brewer.pal(11,"RdYlBu")
# morecols <- colorRampPalette(mypalette)
morecols <- colorRampPalette(c("purple", "white", "dark cyan"))
# make heatmap
pdf(file = "All_HM_TMM.pdf")
heatmap(hm_order(DEgenes,1:6),
col= rev(morecols(50)),
main="All DE genes across samples",
scale="row", Colv = NA, Rowv = NA)
dev.off()
pdf(file = "Top500_HM_TMM.pdf")
heatmap(hm_order(DEgenes500, 1:6), col= rev(morecols(50)),
main="Top 500 DE genes across samples",
scale="row", Colv = NA, Rowv = NA)
dev.off()
# Test
#geneuniv <- ebay$p.value[rownames(ebay$p.value) %in% rownames(down_genes),]
geneuniv <- ebay$p.value[rownames(ebay$p.value) %in% rownames(ttable),] # Original
topDiffGenes <- function(allScore) {+ return(allScore < 0.05)}
#GOterms <- read_rds("GOterms.RDS")
#gene2go <- read_rds("gene2go.RDS")
#id2go <- read_table("/media/yacoub/Seagate/PTENregen/Analysis/id2go.txt")
id2goDF <- as.data.frame(read_table("id2go.tsv", col_names = FALSE))
# id2go <- list(id2goDF$X2)
# names(id2go) <- id2goDF$X1
GOs <- vector(mode = "list", length  = length(id2goDF))
for (ind in 1:length(id2goDF$X2)) {
GOs[ind] <- id2goDF$X2[ind]
}
names(GOs) <- id2goDF$X1
id2go <- GOs
# gene2go <- data.frame(GeneID = names(id2go), GO_ID = GOs)
# gene2go <- gene2go[-1,]
#test <- annFUN.gene2GO("BP", gene2GO =  id2go)
#Initiate Lists
GOdata <- resultFisher <- resultKS <- resultKS.elim <- tab <- allRes <-  vector(mode = "list", length = ncol(geneuniv))
for (ind in 1:ncol(geneuniv)) {     #Start of loop
GOdata[[ind]] <- new("topGOdata",
ontology = "BP",
allGenes = geneuniv[,ind],
geneSel = topDiffGenes,
annotationFun = annFUN.gene2GO,
gene2GO = id2go,
nodeSize = 10
)
resultFisher[[ind]] <- runTest(GOdata[[ind]], algorithm = "classic", statistic = "fisher")
# Kolmogorov-Smirnov testing
resultKS[[ind]] <- runTest(GOdata[[ind]], algorithm = "classic", statistic = "ks")
resultKS.elim[[ind]] <- runTest(GOdata[[ind]], algorithm = "elim", statistic = "ks")
tab[[ind]] <- GenTable(GOdata[[ind]], KS = resultKS[[ind]], topNodes = length(resultKS[[ind]]@score))
#tawrite.table(tab[[ind]], file = "2021.2.23_15vctrl_BP_topnodes.txt", sep = "\t", quote = F, row.names = F, col.names = F)
allRes[[ind]] <- GenTable(GOdata[[ind]], classicFisher = resultFisher[[ind]],
classicKS = resultKS[[ind]], elimKS = resultKS.elim[[ind]],
orderBy = "elimKS", #Used to be "classicFisher"
topNodes = length(resultKS[[ind]]@score))
showSigOfNodes(GOdata[[ind]], score(resultFisher[[ind]]), firstSigNodes = 5,
useInfo ='all')
showSigOfNodes(GOdata[[ind]], score(resultKS[[ind]]), firstSigNodes = 5,
useInfo ='all', useFullNames = TRUE)
} #End of loop
names(GOdata) <- names(resultFisher) <- names(resultKS) <- names(resultKS.elim) <-
names(tab) <- names(allRes) <- colnames(geneuniv)
for (ind in 1:length(allRes)) {
write.table(paste0(names(allRes)[ind]), file = "GOresults_tmm.csv", sep = ",", col.names = FALSE, append = T, row.names = FALSE)
write.table( data.frame(allRes[[ind]]), 'GOresults_tmm.csv',  append= T, sep=',', col.names = NA)
}
lapply(allRes, function(x) write.table( data.frame(x), 'GOresults_tmm.csv',
append= T, sep=',', col.names = NA))
# the available GO terms (all the nodes in the graph)
go <- sel_terms <- ann_genes <- vector(mode = "list", length = length(GOdata))
for (ind in 1:length(GOdata))
{  go[[ind]] <- usedGO(GOdata[[ind]])
# sel_terms[[ind]] <- sample(go[[ind]], 3702)
sel_terms[[ind]] <- go[[ind]]
ann_genes[[ind]] <- genesInTerm(GOdata[[ind]], sel_terms[[ind]]) }
GOused <- c(allRes[[1]][,1], allRes[[2]][,1], allRes[[3]][,1], allRes[[4]][,1], allRes[[5]][,1])
GOused <- unique(GOused)
selterm <- GOused
ind <- 2
anngenes <- genesInTerm(GOdata[[1]], selterm)
while (ind < length(GOdata) + 1) {
anngenes <- rbind(anngenes, genesInTerm(GOdata[[ind]], selterm))
ind <- ind + 1
}
anngenes <- anngenes[!duplicated(anngenes)]
# Find descriptions for all GO IDs
GO_ID2term1 <- rbind(allRes[[1]][,c(1,2)], allRes[[2]][,c(1,2)])
GO_ID2term2 <- rbind(allRes[[3]][,c(1,2)], allRes[[4]][,c(1,2)])
GO_ID2term <- rbind(GO_ID2term1, GO_ID2term2)
GO_ID2term <- rbind(GO_ID2term, allRes[[5]][,c(1,2)])
GO_ID2term <- GO_ID2term[complete.cases(GO_ID2term),]
GO_ID2term <- GO_ID2term[!duplicated(GO_ID2term$GO.ID),]
rownames(GO_ID2term) <- GO_ID2term[,1]
#GO_ID2term <- GO_ID2term[names(anngenes),]
GO_ID2term <- GO_ID2term[GOused,]
GO_ID2term <- GO_ID2term[complete.cases(GO_ID2term),]
rownames(GO_ID2term) <- GO_ID2term[,1]
gene_func <- gene_func_sym <- hmz <- hmrow <- GOhm <- GOsym <-
rowrename <- GOhmAnnot <- hmz <- hmrow <- vector("list", length = length(anngenes))
# For Organizing Heatmaps by relative control expression
for (ind in 1:length(anngenes)) {
GOhmAnnot[[ind]] <- GOhm[[ind]] <- DEgenes[rownames(DEgenes) %in% anngenes[[ind]],]
GOhmAnnot[[ind]] <- gene2sym(GOhmAnnot[[ind]])
}
names(GOhmAnnot) <-  names(GOhm) <- names(anngenes)
# Labeled with gene ids
pdf(file = "GO_HM_TMM.pdf")
for (ind in 1:length(gene_func))
{        heatmap(as.matrix(hm_order(GOhm[[ind]], 1:3)),
col=rev(morecols(50)),
main=GO_ID2term[names(GOhm[ind]),2],
scale="row", Rowv = NA, Colv = NA)      }
dev.off()
# Labeled with annotations
pdf(file = "GO_HM_Human.pdf")
for (ind in 1:length(gene_func))
{        heatmap(as.matrix(hm_order(GOhmAnnot[[ind]], 1:3)),
col=rev(morecols(50)),
main=GO_ID2term[names(GOhm[ind]),2],
scale="row", Rowv = NA, Colv = NA)      }
dev.off()
GOtypes <- read_delim("GOdescription.tsv",
delim = "\t", escape_double = FALSE,
col_names = c("Gene_ID", "GO_ID", "Class", "Description", "Function"),
trim_ws = TRUE) |>
as.data.frame() |>
dplyr::select(c("Gene_ID", "Function"))
GOtypes <- merge(annotations[,c(1,3:4)], GOtypes, by =1)
gene_func <- vector(mode = "list")
gene_func$cellcycle <-
GOtypes[grep("cycle|cyclin", GOtypes$Function, ignore.case = T),] |>
dplyr::select(c("GeneID", "Symbol")) |> unique()
gene_func$DNArepair <-
GOtypes[grep("DNA repair", GOtypes$Function, ignore.case = T),] |>
dplyr::select(c("GeneID", "Symbol")) |> unique()
gene_func$DNArepair <-
rbind(gene_func$DNArepair,
GOtypes[grep("rad54", GOtypes$Symbol, ignore.case = T),] |>
dplyr::select(c("GeneID", "Symbol")) |> unique() )
gene_func$DNAreplication <-
GOtypes[grep("replication", GOtypes$Function, ignore.case = T),] |>
dplyr::select(c("GeneID", "Symbol")) |> unique()
gene_func$CellDeath <-
GOtypes[grep("cell death", GOtypes$Function, ignore.case = T),] |>
dplyr::select(c("GeneID", "Symbol")) |> unique()
gene_func$Neoblast <-
GOtypes[grep("stem cell", GOtypes$Function, ignore.case = T),] |>
dplyr::select(c("GeneID", "Symbol")) |> unique()
gene_func$Neoblast <-
rbind( gene_func$Neoblast,
GOtypes[grep("piwi", GOtypes$Symbol, ignore.case = T),] |>
dplyr::select(c("GeneID", "Symbol")) |> unique() )
gene_func$Neural <-
GOtypes[grep("neural|neuron", GOtypes$Function, ignore.case = T),] |>
dplyr::select(c("GeneID", "Symbol")) |> unique()
gene_func$Neural <-
rbind(gene_func$Neural,
GOtypes[grep("SCRO|ISCW_ISCW020063|CG32532",
GOtypes$Symbol, ignore.case = T),] |>
dplyr::select(c("GeneID", "Symbol")) |> unique())
pdf("Custom_Gene_Function_HM.pdf", height = 20, width = 25)
for (ind in 1:length(gene_func)) {
hm <- merge(DEgenes, gene_func[[ind]], by.x=0, by.y=1)
hm <- hm[!duplicated(hm$Symbol),2:ncol(hm)]
hm <- col2namerow(hm, col = ncol(hm))
heatmap(as.matrix(hm_order(hm, cols = 1:3)),
col=rev(morecols(50)),
main= names(gene_func)[ind],
scale="row", Rowv = NA, Colv = NA)
}
dev.off()
all_annots_considered <-
GOtypes[ c(
grep("cycle|cyclin|DNA repair|replication|cell death|stem cell|neural|neuron",
GOtypes$Function, ignore.case = T),
grep("rad54|SCRO|ISCW_ISCW020063|CG32532", GOtypes$Symbol, ignore.case = T)
),]
write_delim(all_annots_considered, "all_annots_considered.txt", delim = "\t")
DEannot <- gene2sym(DEgenes)
dt <-decideTests(ebay, p.value = .05, lfc = .25)
summary(dt)
?download.file
download.file("https://ucmerced.box.com/v/file2btested")
download.file("https://ucmerced.box.com/v/file2btested","test")
download.file("https://ucmerced.box.com/v/file2btested","test.docx")
knitr::opts_chunk$set(echo = FALSE)
packages = c("BiocManager","tidyverse", "ggplot2", "dplyr", "RColorBrewer", "ggthemes", "formattable", "gplots", "readr",  "RColorBrewer", "limma", "edgeR", "Rsubread", "topGO", "circlize", "genefilter")
## Load R and BioConductoR packages
lapply(packages, library, character.only = T)
# Order dataframe/matrix by selected columns
# input dataframe/matrix and selected columns
hm_order <- function(df, cols = c(1), decr = FALSE){
if(length(cols) > 1){
hmz <- apply(df, 2, FUN = function(x)
{return( (rowMeans(df) - x)/rowSds(df) )} )
hmrow <- rowSums(hmz[,cols]) #Columns 1 to 3 are control
df[order(hmrow, decreasing = decr),]
}
else {
hmz <- apply(df, 2, FUN = function(x)
{return( (rowMeans(df) - x)/rowSds(df) )} )
df[order(hmz[,cols], decreasing = decr),]
}
}
smes <- read_delim("~/MEGAsync/bioinformatics/PTENpaul/Smes.tsv",
delim = "\t", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
counts <- readRDS('counts.RDS')
counts <- counts[,-c(1,6,13)] #samples removed because MDS plot
full_metadata <- readRDS("metadata_final.RDS")
metadata <- data.frame(samples = rownames(full_metadata), condition = full_metadata$Group)
# annot <- readRDS("annotations.RDS")
annot <- read_delim("Annotations.tsv",
delim = "\t", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
annot <- as.data.frame(annot[,c(1,5,2)])
colnames(annot) <- c("smedID", "symbol", "description")
annot_sym <- readRDS("Annotation_Symbols.RDS")
all_annotations <- read.delim2("all_annotations.tsv")
counts <- counts[,metadata$samples]
for (annots in annot_sym) {
all_annotations <- merge(all_annotations, annots, by = 1, all = T)
}
DGE <- DGEList(counts,
norm.factors = calcNormFactors(counts, method = "TMM"),
samples = metadata$samples,
group = metadata$condition)
DGE
# Load a nice color palette of 50 colors to be used for plots
myPalette <- c(brewer.pal(8, "Set1"), brewer.pal(8, "Set2"))
# convert counts to cpm and log
unfilteredExpr <- cpm(DGE, log=TRUE)
# Filter lowly expressed genes via edgeR
keep = filterByExpr(DGE, group = metadata$condition)
DGE <- DGE[keep, , keep.lib.sizes = FALSE]
# Calculate normalization factors
DGE <- calcNormFactors(DGE, method = "TMM")
# Plot the density of filtered gene expression for all samples within groups
filteredExpr <- cpm(DGE, log=TRUE)
filteredExpr[filteredExpr<0] <- 0    #ensuring no negative values
# Plot the density of unfiltered and filtered gene expression for all samples within groups
par(mfrow=c(2,2))
plotDensities(unfilteredExpr, group=metadata$condition, col=myPalette[1:8])
plotDensities(filteredExpr, group=metadata$condition, col=myPalette[1:8])
boxplot(unfilteredExpr, las=2, main="")
boxplot(filteredExpr, las=2, main="")
#Regeneration
col.group <- metadata$condition
col.group <- factor(col.group)
levels(col.group) <- brewer.pal(nlevels(col.group), "Set1")
pdf("MDSplot.pdf", title = "My Title")
plotMDS(filteredExpr, labels=metadata$condition, col=c(rep("blue",12), rep("red",12), rep("black",9)))
dev.off()
the_design <- model.matrix(~0 +condition, data = metadata)
colnames(the_design) <- gsub("condition", "", colnames(the_design))
contr.matrix <- makeContrasts(
conVSP2 = P2 - C0,
conVSP4 = P4 - C0,
P2VSP3 = P3 - P2,
conVSP3 = P3 - C0,
conVSP6 = P6 - C0,
conVSP11 = P11 - C0,
levels = c("C0", "P2", "P3", "P4", "P6", "P11"))
the_design
contr.matrix
head(counts)
the_design <- model.matrix(~0 +condition, data = metadata)
colnames(the_design) <- gsub("condition", "", colnames(the_design))
contr.matrix <- makeContrasts(
conVSP2 = P2 - C0,
conVSP4 = P4 - C0,
P2VSP3 = P3 - P2 - P11,
conVSP3 = P3 - C0,
conVSP6 = P6 - C0,
conVSP11 = P11 - C0,
levels = c("C0", "P2", "P3", "P4", "P6", "P11"))
the_design
contr.matrix
head(library())
head(installed.packages())
packages = c("BiocManager","tidyverse", "ggplot2", "dplyr", "RColorBrewer",
"ggthemes", "formattable", "gplots", "readr",  "RColorBrewer",
"limma", "edgeR", "Rsubread", "topGO", "circlize", "genefilter",
"RSelenium")
installed.packages(packages)
installed.packages("BiocManager")
packages[packages %in% installed.packages()[,1]]
installed.packages()[,1]
packages[packages %in% installed.packages()[,1]]
packages %in% installed.packages()[,1]
packages[!(packages %in% installed.packages()[,1])]
BiocManager::install(packages[!(packages %in% installed.packages()[,1])])
packages[!(packages %in% installed.packages()[,1])]
length(packages[!(packages %in% installed.packages()[,1])])
# Download Genome
EZ$DLgenome <- function()
{
gitlink <- "https://planmine.mpibpc.mpg.de/planmine/model/bulkdata/dd_Smes_g4.fasta.zip"
getOption('timeout')
options(timeout=1500)
download.file(gitlink, "genome.fa")
}
setwd("~/github/EZworm")
EZ <- list()  # Stores functions
# Download Genome
EZ$DLgenome <- function()
{
gitlink <- "https://planmine.mpibpc.mpg.de/planmine/model/bulkdata/dd_Smes_g4.fasta.zip"
getOption('timeout')
options(timeout=1500)
download.file(gitlink, "genome.fa")
}
EZ$DLgenome()
source("https://planmine.mpibpc.mpg.de/planmine/model/bulkdata/dd_Smes_g4.fasta.zip")
# Download Genome
EZ$DLgenome <- function()
{
gitlink <- "http://planmine.mpibpc.mpg.de/planmine/model/bulkdata/dd_Smes_g4.fasta.zip"
getOption('timeout')
options(timeout=1500)
download.file(gitlink, "genome.fa")
}
EZ$DLgenome()
